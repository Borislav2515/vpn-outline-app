import React, { useState, useEffect } from 'react';
import { WalletIcon, Plus, CreditCard, History, TrendingUp, Key, Copy, Download, Trash2, Edit } from 'lucide-react';
import './Wallet.css';
import userDataAPI from '../api/userData';
import outlineAPI from '../api/outlineAPI';

const WalletPage = () => {
  const [activeTab, setActiveTab] = useState('keys');

  const [balance, setBalance] = useState({
    amount: '0.00',
    currency: '‚ÇΩ',
    status: '–ê–∫—Ç–∏–≤–µ–Ω'
  });

  const [outlineKeys, setOutlineKeys] = useState([]);

  const [transactions, setTransactions] = useState([]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞
  useEffect(() => {
    const loadWalletData = () => {
      // –§–µ–π–∫–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
      setBalance({
        amount: '1,250.00',
        currency: '‚ÇΩ',
        status: '–ê–∫—Ç–∏–≤–µ–Ω'
      });

      // –§–µ–π–∫–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      setTransactions([
        {
          id: '1',
          type: 'income',
          amount: 500.00,
          description: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞',
          date: '2024-03-15'
        },
        {
          id: '2',
          type: 'expense',
          amount: -299.00,
          description: '–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞ –°–®–ê',
          date: '2024-03-10'
        },
        {
          id: '3',
          type: 'income',
          amount: 1000.00,
          description: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞',
          date: '2024-03-01'
        }
      ]);

      // –§–µ–π–∫–æ–≤—ã–µ –∫–ª—é—á–∏ Outline
      setOutlineKeys([
        {
          id: 'key-1',
          name: '–ö–ª—é—á –°–®–ê (–ù—å—é-–ô–æ—Ä–∫)',
          server: 'üá∫üá∏ –°–®–ê',
          status: 'active',
          trafficUsed: '8.7 –ì–ë',
          trafficLimit: '50 –ì–ë',
          createdAt: '2024-03-01',
          expires: '2024-04-15',
          accessUrl: 'ss://fake-key-1@us-east.com:12345'
        },
        {
          id: 'key-2',
          name: '–ö–ª—é—á –ì–µ—Ä–º–∞–Ω–∏—è (–§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç)',
          server: 'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è',
          status: 'active',
          trafficUsed: '6.5 –ì–ë',
          trafficLimit: '50 –ì–ë',
          createdAt: '2024-03-05',
          expires: '2024-04-20',
          accessUrl: 'ss://fake-key-2@de-frankfurt.com:12345'
        }
      ]);
    };

    loadWalletData();
  }, []);

  const handleCopyKey = (keyUrl) => {
    navigator.clipboard.writeText(keyUrl).then(() => {
      alert('–ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    }).catch(() => {
      alert('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞');
    });
  };

  const handleDownloadKey = (keyUrl, keyName) => {
    const blob = new Blob([keyUrl], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${keyName}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleDeleteKey = async (keyId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á?')) {
      // –£–¥–∞–ª—è–µ–º –∫–ª—é—á –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setOutlineKeys(prevKeys => prevKeys.filter(key => key.id !== keyId));
      alert('–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! (–¥–µ–º–æ-–≤–µ—Ä—Å–∏—è)');
    }
  };

  const handleRenameKey = async (keyId, currentName) => {
    const newName = window.prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–ª—é—á–∞:', currentName);
    if (newName && newName.trim()) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∫–ª—é—á–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      setOutlineKeys(prevKeys => 
        prevKeys.map(key => 
          key.id === keyId ? { ...key, name: newName.trim() } : key
        )
      );
      alert('–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω! (–¥–µ–º–æ-–≤–µ—Ä—Å–∏—è)');
    }
  };

  const quickActions = [
    { icon: Plus, title: '–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á', color: '#28a745' },
    { icon: Key, title: '–ú–æ–∏ –∫–ª—é—á–∏', color: '#007bff' },
    { icon: History, title: '–ò—Å—Ç–æ—Ä–∏—è', color: '#6c757d' },
    { icon: TrendingUp, title: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', color: '#ffc107' }
  ];

  return (
    <div className="wallet">
      {/* Balance Card */}
      <div className="card balance-card">
        <div className="balance-header">
          <div className="balance-icon">
            <WalletIcon size={24} />
          </div>
          <div className="balance-info">
            <span className="balance-label">–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞</span>
            <div className="balance-amount">
              <span className="amount">{balance.amount}</span>
              <span className="currency">{balance.currency}</span>
            </div>
            <div className="balance-status">
              <div className="status-indicator status-connected"></div>
              <span>{balance.status}</span>
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="card actions-card">
        <div className="actions-grid">
          {quickActions.map((action, index) => {
            const Icon = action.icon;
            return (
              <button key={index} className="action-btn" style={{ '--action-color': action.color }}>
                <div className="action-icon">
                  <Icon size={20} />
                </div>
                <span className="action-title">{action.title}</span>
              </button>
            );
          })}
        </div>
      </div>

      {/* Tabs */}
      <div className="card tabs-card">
        <div className="tabs-header">
          <button 
            className={`tab-btn ${activeTab === 'keys' ? 'active' : ''}`}
            onClick={() => setActiveTab('keys')}
          >
            –ú–æ–∏ –∫–ª—é—á–∏
          </button>
          <button 
            className={`tab-btn ${activeTab === 'history' ? 'active' : ''}`}
            onClick={() => setActiveTab('history')}
          >
            –ò—Å—Ç–æ—Ä–∏—è
          </button>
          <button 
            className={`tab-btn ${activeTab === 'cards' ? 'active' : ''}`}
            onClick={() => setActiveTab('cards')}
          >
            –ö–∞—Ä—Ç—ã
          </button>
        </div>

        {/* Keys Tab */}
        {activeTab === 'keys' && (
          <div className="tab-content">
            <div className="keys-list">
              {outlineKeys.map((key) => (
                <div key={key.id} className="key-card">
                  <div className="key-header">
                    <div className="key-info">
                      <h4 className="key-name">{key.name}</h4>
                      <span className="key-server">{key.server}</span>
                    </div>
                    <div className="key-status">
                      <div className="status-indicator status-connected"></div>
                      <span>–ê–∫—Ç–∏–≤–µ–Ω</span>
                    </div>
                  </div>
                  
                  <div className="key-traffic">
                    <div className="traffic-info">
                      <span>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {key.trafficUsed} / {key.trafficLimit}</span>
                      <div className="traffic-bar">
                        <div 
                          className="traffic-fill" 
                          style={{ width: `${(parseFloat(key.trafficUsed) / parseFloat(key.trafficLimit)) * 100}%` }}
                        ></div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="key-details">
                    <div className="key-detail">
                      <span className="label">–°–æ–∑–¥–∞–Ω:</span>
                      <span className="value">{key.createdAt}</span>
                    </div>
                    <div className="key-detail">
                      <span className="label">–ò—Å—Ç–µ–∫–∞–µ—Ç:</span>
                      <span className="value">{key.expires}</span>
                    </div>
                  </div>
                  
                  <div className="key-actions">
                    <button 
                      className="key-action-btn"
                      onClick={() => handleRenameKey(key.id, key.name)}
                      title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"
                    >
                      <Edit size={16} />
                    </button>
                    <button 
                      className="key-action-btn"
                      onClick={() => handleCopyKey(key.accessUrl)}
                      title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
                    >
                      <Copy size={16} />
                    </button>
                    <button 
                      className="key-action-btn"
                      onClick={() => handleDownloadKey(key.accessUrl, key.name)}
                      title="–°–∫–∞—á–∞—Ç—å"
                    >
                      <Download size={16} />
                    </button>
                    <button 
                      className="key-action-btn delete"
                      onClick={() => handleDeleteKey(key.id)}
                      title="–£–¥–∞–ª–∏—Ç—å"
                    >
                      <Trash2 size={16} />
                    </button>
                  </div>
                </div>
              ))}
              
              {outlineKeys.length === 0 && (
                <div className="no-keys">
                  <Key size={48} />
                  <h4>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π</h4>
                  <p>–ö—É–ø–∏—Ç–µ –∫–ª—é—á –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</p>
                </div>
              )}
            </div>
          </div>
        )}

        {/* History Tab */}
        {activeTab === 'history' && (
          <div className="tab-content">
            <div className="transactions-list">
              {transactions.map((transaction) => {
                const Icon = transaction.icon;
                return (
                  <div key={transaction.id} className="transaction-item">
                    <div className="transaction-icon">
                      <Icon size={20} />
                    </div>
                    <div className="transaction-content">
                      <div className="transaction-info">
                        <span className="transaction-description">{transaction.description}</span>
                        <span className="transaction-date">{transaction.date}</span>
                      </div>
                      <span className={`transaction-amount ${transaction.type}`}>
                        {transaction.amount} ‚ÇΩ
                      </span>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        {/* Cards Tab */}
        {activeTab === 'cards' && (
          <div className="tab-content">
            <div className="payment-methods">
              <div className="payment-method">
                <div className="method-info">
                  <div className="method-icon">
                    <CreditCard size={20} />
                  </div>
                  <div className="method-details">
                    <span className="method-name">Visa ****1234</span>
                    <span className="method-default">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</span>
                  </div>
                </div>
                <button className="method-action">
                  –ò–∑–º–µ–Ω–∏—Ç—å
                </button>
              </div>
              
              <button className="btn add-card-btn">
                <Plus size={20} />
                <span>–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É</span>
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default WalletPage; 