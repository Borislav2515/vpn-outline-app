const express = require('express');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// In-memory storage (ะฒ ัะตะฐะปัะฝะพะผ ะฟัะพะตะบัะต ะทะดะตัั ะฑัะปะฐ ะฑั ะฑะฐะทะฐ ะดะฐะฝะฝัั)
const users = new Map();
const keys = new Map();
const transactions = new Map();

// ะะฝะธัะธะฐะปะธะทะฐัะธั ัะตััะพะฒัั ะดะฐะฝะฝัั
const initializeTestData = () => {
  // ะขะตััะพะฒัะน ะฟะพะปัะทะพะฒะฐัะตะปั
  const testUserId = '123456789';
  users.set(testUserId, {
    id: testUserId,
    first_name: 'ะขะตัั',
    last_name: 'ะะพะปัะทะพะฒะฐัะตะปั',
    username: 'testuser',
    balance: 1000.00,
    joinDate: new Date().toISOString(),
    plan: 'Premium'
  });

  // ะขะตััะพะฒัะต ะบะปััะธ
  const key1 = {
    id: uuidv4(),
    userId: testUserId,
    name: 'ะะปัั ะกะจะ (ะัั-ะะพัะบ)',
    server: 'us-east.outline.com',
    key: 'ss://YWVzLTI1Ni1nY206cGFzc3dvcmQ=@us-east.outline.com:12345',
    status: 'active',
    trafficUsed: '15.2 ะะ',
    trafficLimit: '50 ะะ',
    expires: '2024-04-15',
    createdAt: '2024-03-01'
  };

  const key2 = {
    id: uuidv4(),
    userId: testUserId,
    name: 'ะะปัั ะะตัะผะฐะฝะธั (ะคัะฐะฝะบัััั)',
    server: 'de.outline.com',
    key: 'ss://YWVzLTI1Ni1nY206cGFzc3dvcmQ=@de.outline.com:12345',
    status: 'active',
    trafficUsed: '8.7 ะะ',
    trafficLimit: '50 ะะ',
    expires: '2024-04-20',
    createdAt: '2024-03-05'
  };

  keys.set(key1.id, key1);
  keys.set(key2.id, key2);

  // ะขะตััะพะฒัะต ััะฐะฝะทะฐะบัะธะธ
  const transaction1 = {
    id: uuidv4(),
    userId: testUserId,
    type: 'income',
    amount: 500.00,
    description: 'ะะพะฟะพะปะฝะตะฝะธะต ััะตัะฐ',
    date: new Date().toISOString()
  };

  const transaction2 = {
    id: uuidv4(),
    userId: testUserId,
    type: 'expense',
    amount: -299.00,
    description: 'ะะพะบัะฟะบะฐ ะบะปััะฐ ะกะจะ',
    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
  };

  transactions.set(transaction1.id, transaction1);
  transactions.set(transaction2.id, transaction2);
};

// ะะฝะธัะธะฐะปะธะทะธััะตะผ ัะตััะพะฒัะต ะดะฐะฝะฝัะต
initializeTestData();

// Routes

// ะะพะปััะตะฝะธะต ััะฐัะธััะธะบะธ ะฟะพะปัะทะพะฒะฐัะตะปั
app.get('/api/user/:userId/stats', (req, res) => {
  const { userId } = req.params;
  
  try {
    const user = users.get(userId);
    if (!user) {
      return res.status(404).json({ error: 'ะะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฝะฐะนะดะตะฝ' });
    }

    // ะะพะปััะฐะตะผ ะบะปััะธ ะฟะพะปัะทะพะฒะฐัะตะปั
    const userKeys = Array.from(keys.values()).filter(key => key.userId === userId);
    
    const stats = {
      totalConnections: userKeys.length * 25, // ะัะธะผะตัะฝะฐั ััะฐัะธััะธะบะฐ
      totalData: userKeys.reduce((sum, key) => {
        const used = parseFloat(key.trafficUsed);
        return sum + (isNaN(used) ? 0 : used);
      }, 0) + ' ะะ',
      favoriteServer: userKeys.length > 0 ? userKeys[0].name.split(' ')[1] : 'ะะตั ะดะฐะฝะฝัั',
      lastConnection: userKeys.length > 0 ? '2 ัะฐัะฐ ะฝะฐะทะฐะด' : 'ะะตั ะฟะพะดะบะปััะตะฝะธะน'
    };

    res.json(stats);
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟะพะปััะตะฝะธั ััะฐัะธััะธะบะธ:', error);
    res.status(500).json({ error: 'ะะฝัััะตะฝะฝัั ะพัะธะฑะบะฐ ัะตัะฒะตัะฐ' });
  }
});

// ะะพะปััะตะฝะธะต ััะฐัะธะบะฐ ะฟะพะปัะทะพะฒะฐัะตะปั
app.get('/api/user/:userId/traffic', (req, res) => {
  const { userId } = req.params;
  
  try {
    const user = users.get(userId);
    if (!user) {
      return res.status(404).json({ error: 'ะะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฝะฐะนะดะตะฝ' });
    }

    const userKeys = Array.from(keys.values()).filter(key => key.userId === userId);
    const totalUsed = userKeys.reduce((sum, key) => {
      const used = parseFloat(key.trafficUsed);
      return sum + (isNaN(used) ? 0 : used);
    }, 0);
    
    const totalLimit = userKeys.reduce((sum, key) => {
      const limit = parseFloat(key.trafficLimit);
      return sum + (isNaN(limit) ? 0 : limit);
    }, 0);

    const trafficStats = {
      totalUsed: totalUsed + ' ะะ',
      totalLimit: totalLimit + ' ะะ',
      remaining: Math.max(0, totalLimit - totalUsed) + ' ะะ',
      period: '30 ะดะฝะตะน',
      dailyAverage: (totalUsed / 30).toFixed(1) + ' ะะ',
      lastReset: '15 ะดะฝะตะน ะฝะฐะทะฐะด'
    };

    res.json(trafficStats);
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟะพะปััะตะฝะธั ััะฐัะธะบะฐ:', error);
    res.status(500).json({ error: 'ะะฝัััะตะฝะฝัั ะพัะธะฑะบะฐ ัะตัะฒะตัะฐ' });
  }
});

// ะะพะปััะตะฝะธะต ะฐะบัะธะฒะฝัั ะบะปััะตะน
app.get('/api/user/:userId/keys', (req, res) => {
  const { userId } = req.params;
  
  try {
    const user = users.get(userId);
    if (!user) {
      return res.status(404).json({ error: 'ะะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฝะฐะนะดะตะฝ' });
    }

    const userKeys = Array.from(keys.values()).filter(key => key.userId === userId);
    res.json(userKeys);
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟะพะปััะตะฝะธั ะบะปััะตะน:', error);
    res.status(500).json({ error: 'ะะฝัััะตะฝะฝัั ะพัะธะฑะบะฐ ัะตัะฒะตัะฐ' });
  }
});

// ะะพะปััะตะฝะธะต ะฑะฐะปะฐะฝัะฐ
app.get('/api/user/:userId/balance', (req, res) => {
  const { userId } = req.params;
  
  try {
    const user = users.get(userId);
    if (!user) {
      return res.status(404).json({ error: 'ะะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฝะฐะนะดะตะฝ' });
    }

    const balance = {
      amount: user.balance.toFixed(2),
      currency: 'โฝ',
      status: 'ะะบัะธะฒะตะฝ'
    };

    res.json(balance);
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟะพะปััะตะฝะธั ะฑะฐะปะฐะฝัะฐ:', error);
    res.status(500).json({ error: 'ะะฝัััะตะฝะฝัั ะพัะธะฑะบะฐ ัะตัะฒะตัะฐ' });
  }
});

// ะะพะปััะตะฝะธะต ััะฐะฝะทะฐะบัะธะน
app.get('/api/user/:userId/transactions', (req, res) => {
  const { userId } = req.params;
  
  try {
    const user = users.get(userId);
    if (!user) {
      return res.status(404).json({ error: 'ะะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฝะฐะนะดะตะฝ' });
    }

    const userTransactions = Array.from(transactions.values()).filter(t => t.userId === userId);
    res.json(userTransactions);
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟะพะปััะตะฝะธั ััะฐะฝะทะฐะบัะธะน:', error);
    res.status(500).json({ error: 'ะะฝัััะตะฝะฝัั ะพัะธะฑะบะฐ ัะตัะฒะตัะฐ' });
  }
});

// ะะพะปััะตะฝะธะต ะบะปััะตะน Outline
app.get('/api/user/:userId/outline-keys', (req, res) => {
  const { userId } = req.params;
  
  try {
    const user = users.get(userId);
    if (!user) {
      return res.status(404).json({ error: 'ะะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฝะฐะนะดะตะฝ' });
    }

    const userKeys = Array.from(keys.values()).filter(key => key.userId === userId);
    res.json(userKeys);
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟะพะปััะตะฝะธั ะบะปััะตะน Outline:', error);
    res.status(500).json({ error: 'ะะฝัััะตะฝะฝัั ะพัะธะฑะบะฐ ัะตัะฒะตัะฐ' });
  }
});

// Health check
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Start server
app.listen(PORT, () => {
  console.log(`๐ API ัะตัะฒะตั ะทะฐะฟััะตะฝ ะฝะฐ ะฟะพััั ${PORT}`);
  console.log(`๐ Health check: http://localhost:${PORT}/api/health`);
}); 