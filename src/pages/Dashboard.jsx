import React, { useState, useEffect } from 'react';
import { Server, Download, Calendar, Globe, Key, ShoppingCart, TrendingUp, Plus } from 'lucide-react';
import './Dashboard.css';
import userDataAPI from '../api/userData';
import outlineAPI from '../api/outlineAPI';

const Dashboard = () => {
  const [selectedServer, setSelectedServer] = useState(null);
  const [showServerList, setShowServerList] = useState(false);
  const [serverInfo, setServerInfo] = useState(null);
  const [isCreatingKey, setIsCreatingKey] = useState(false);
  const [isServerDropdownOpen, setIsServerDropdownOpen] = useState(false);

  const servers = [
    { 
      id: 'us-east', 
      name: '–°–®–ê (–í–æ—Å—Ç–æ—á–Ω–æ–µ –ø–æ–±–µ—Ä–µ–∂—å–µ)', 
      flag: 'üá∫üá∏', 
      location: '–ù—å—é-–ô–æ—Ä–∫',
      price: '299 ‚ÇΩ',
      speed: '1 –ì–±–∏—Ç/—Å',
      load: '45%',
      status: 'online'
    },
    { 
      id: 'us-west', 
      name: '–°–®–ê (–ó–∞–ø–∞–¥–Ω–æ–µ –ø–æ–±–µ—Ä–µ–∂—å–µ)', 
      flag: 'üá∫üá∏', 
      location: '–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å',
      price: '299 ‚ÇΩ',
      speed: '1 –ì–±–∏—Ç/—Å',
      load: '32%',
      status: 'online'
    },
    { 
      id: 'uk', 
      name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', 
      flag: 'üá¨üáß', 
      location: '–õ–æ–Ω–¥–æ–Ω',
      price: '399 ‚ÇΩ',
      speed: '1 –ì–±–∏—Ç/—Å',
      load: '28%',
      status: 'online'
    },
    { 
      id: 'de', 
      name: '–ì–µ—Ä–º–∞–Ω–∏—è', 
      flag: 'üá©üá™', 
      location: '–§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç',
      price: '349 ‚ÇΩ',
      speed: '1 –ì–±–∏—Ç/—Å',
      load: '55%',
      status: 'online'
    },
    { 
      id: 'jp', 
      name: '–Ø–ø–æ–Ω–∏—è', 
      flag: 'üáØüáµ', 
      location: '–¢–æ–∫–∏–æ',
      price: '449 ‚ÇΩ',
      speed: '1 –ì–±–∏—Ç/—Å',
      load: '18%',
      status: 'online'
    },
    { 
      id: 'sg', 
      name: '–°–∏–Ω–≥–∞–ø—É—Ä', 
      flag: 'üá∏üá¨', 
      location: '–°–∏–Ω–≥–∞–ø—É—Ä',
      price: '399 ‚ÇΩ',
      speed: '1 –ì–±–∏—Ç/—Å',
      load: '22%',
      status: 'online'
    }
  ];

  const [trafficStats, setTrafficStats] = useState({
    totalUsed: '0 –ì–ë',
    totalLimit: '0 –ì–ë',
    remaining: '0 –ì–ë',
    period: '30 –¥–Ω–µ–π',
    dailyAverage: '0 –ì–ë',
    lastReset: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
  });

  const [activeKeys, setActiveKeys] = useState([]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const loadDashboardData = async () => {
      const telegramUser = userDataAPI.getTelegramUserData();
      
      if (telegramUser.id) {
        const [trafficData, keysData] = await Promise.all([
          userDataAPI.getTrafficStats(telegramUser.id),
          userDataAPI.getActiveKeys(telegramUser.id)
        ]);
        
        setTrafficStats(trafficData);
        setActiveKeys(keysData);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Outline —Å–µ—Ä–≤–µ—Ä–µ
      try {
        const serverData = await outlineAPI.getServerInfo();
        setServerInfo(serverData);
        
        // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Outline
        const outlineServer = {
          id: 'outline-ny',
          name: '–°–®–ê (–í–æ—Å—Ç–æ—á–Ω–æ–µ –ø–æ–±–µ—Ä–µ–∂—å–µ)',
          flag: 'üá∫üá∏',
          location: '–ù—å—é-–ô–æ—Ä–∫',
          price: '299 ‚ÇΩ',
          speed: '1 –ì–±–∏—Ç/—Å',
          load: '45%',
          status: serverData.status || 'online'
        };
        
        setSelectedServer(outlineServer);
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä Outline –∑–∞–≥—Ä—É–∂–µ–Ω:', outlineServer);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ:', error);
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
        setSelectedServer(servers[0]);
      }
    };

    loadDashboardData();
  }, []);

  const handleBuyKey = async (server) => {
    if (!server) return;
    
    setIsCreatingKey(true);
    try {
      console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞:', server);
      
      const keyName = `–ö–ª—é—á ${server.name} - ${new Date().toLocaleDateString()}`;
      const newKey = await outlineAPI.createKey(keyName);
      
      console.log('‚úÖ –ö–ª—é—á —Å–æ–∑–¥–∞–Ω:', newKey);
      
      alert(`–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–ò–º—è: ${newKey.name}\n–ö–ª—é—á: ${newKey.accessUrl}\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Outline Client.`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π
      const updatedKeys = await outlineAPI.getKeys();
      setActiveKeys(updatedKeys);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
      setIsCreatingKey(false);
    }
  };

  return (
    <div className="dashboard">
      {/* Traffic Stats Card */}
      <div className="card traffic-card">
        <div className="traffic-header">
          <div className="traffic-icon">
            <TrendingUp size={24} />
          </div>
          <div className="traffic-info">
            <span className="traffic-label" style={{ color: 'white' }}>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞</span>
            <div className="traffic-amount">
              <span className="used" style={{ color: 'white' }}>{trafficStats.totalUsed}</span>
              <span className="separator" style={{ color: 'white' }}>/</span>
              <span className="limit" style={{ color: 'white' }}>{trafficStats.totalLimit}</span>
            </div>
            <div className="traffic-progress">
              <div className="progress-bar">
                <div 
                  className="progress-fill" 
                  style={{ width: `${(parseFloat(trafficStats.totalUsed) / parseFloat(trafficStats.totalLimit)) * 100}%` }}
                ></div>
              </div>
              <span className="remaining">{trafficStats.remaining} –æ—Å—Ç–∞–ª–æ—Å—å</span>
            </div>
          </div>
        </div>
        
        <div className="traffic-details">
          <div className="traffic-stat">
            <Calendar size={16} />
            <span>–ü–µ—Ä–∏–æ–¥: {trafficStats.period}</span>
          </div>
          <div className="traffic-stat">
            <Download size={16} />
            <span>–°—Ä–µ–¥–Ω–µ–µ: {trafficStats.dailyAverage}/–¥–µ–Ω—å</span>
          </div>
        </div>
      </div>

      {/* Server Selection */}
      <div className="card server-card">
        <div className="card-header">
          <Globe size={20} />
          <h3>–í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏</h3>
        </div>
        
        <div className="server-dropdown-container">
          <div 
            className="server-dropdown"
            onClick={() => setIsServerDropdownOpen(!isServerDropdownOpen)}
          >
            <div className="dropdown-selected">
              {selectedServer ? (
                <>
                  <span className="server-flag">{selectedServer.flag}</span>
                  <span className="server-name">{selectedServer.name}</span>
                </>
              ) : (
                <span className="placeholder">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É</span>
              )}
            </div>
            <div className={`dropdown-arrow ${isServerDropdownOpen ? 'open' : ''}`}>
              ‚ñº
            </div>
          </div>
          
          {isServerDropdownOpen && (
            <div className="server-dropdown-menu">
              {servers.map((server) => (
                <div 
                  key={server.id} 
                  className="dropdown-item"
                  onClick={() => {
                    setSelectedServer(server);
                    setIsServerDropdownOpen(false);
                  }}
                >
                  <span className="server-flag">{server.flag}</span>
                  <div className="server-info">
                    <span className="server-name">{server.name}</span>
                    <span className="server-location">{server.location}</span>
                  </div>
                  <div className="server-stats">
                    <span className="ping">{server.load}</span>
                    <span className="price">{server.price}</span>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
        
        {selectedServer && (
          <div className="selected-server-info">
            <div className="server-card selected">
              <div className="server-flag">{selectedServer.flag}</div>
              <div className="server-info">
                <h4>{selectedServer.name}</h4>
                <p>{selectedServer.location}</p>
                <div className="server-stats">
                  <span className="speed">{selectedServer.speed}</span>
                  <span className="load">–ù–∞–≥—Ä—É–∑–∫–∞: {selectedServer.load}</span>
                </div>
              </div>
              <div className="server-status">
                <div className={`status-indicator ${selectedServer.status}`}></div>
              </div>
            </div>
            
            <button 
              className="create-key-btn"
              onClick={() => handleBuyKey(selectedServer)}
              disabled={isCreatingKey}
            >
              {isCreatingKey ? (
                <>
                  <div className="loading-spinner"></div>
                  –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞...
                </>
              ) : (
                <>
                  <Plus size={16} />
                  –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á –∑–∞ {selectedServer.price}
                </>
              )}
            </button>
          </div>
        )}
      </div>

      {/* Active Keys */}
      <div className="card keys-card">
        <div className="card-header">
          <Key size={20} />
          <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏</h3>
        </div>
        
        <div className="keys-list">
          {activeKeys.map((key) => (
            <div key={key.id} className="key-item">
              <div className="key-info">
                <div className="key-server">
                  <Server size={16} />
                  <span>{key.server}</span>
                </div>
                <div className="key-status">
                  <div className="status-indicator status-connected"></div>
                  <span>–ê–∫—Ç–∏–≤–µ–Ω</span>
                </div>
              </div>
              <div className="key-expires">
                <Calendar size={14} />
                <span>–ò—Å—Ç–µ–∫–∞–µ—Ç: {key.expires}</span>
              </div>
            </div>
          ))}
          
          {activeKeys.length === 0 && (
            <div className="no-keys">
              <Key size={48} />
              <h4>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π</h4>
              <p>–ö—É–ø–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ª—é–±–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã—à–µ</p>
            </div>
          )}
        </div>
      </div>

      {/* Quick Actions */}
      <div className="card actions-card">
        <div className="card-header">
          <h3>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
        </div>
        
        <div className="actions-grid">
          <button className="action-btn">
            <Key size={24} />
            <span>–ú–æ–∏ –∫–ª—é—á–∏</span>
          </button>
          
          <button className="action-btn">
            <TrendingUp size={24} />
            <span>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</span>
          </button>
          
          <button className="action-btn">
            <ShoppingCart size={24} />
            <span>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫</span>
          </button>
          
          <button className="action-btn">
            <Globe size={24} />
            <span>–í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã</span>
          </button>
        </div>
      </div>
    </div>
  );
};

export default Dashboard; 