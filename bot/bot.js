const TelegramBot = require('node-telegram-bot-api');
const config = require('./config');

// –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const token = config.BOT_TOKEN;

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.first_name;
  
  const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${username}! üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ R14-VPN! 

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
üîê –ö—É–ø–∏—Ç—å –∫–ª—é—á–∏ Outline VPN
üí≥ –£–ø—Ä–∞–≤–ª—è—Ç—å –±–∞–ª–∞–Ω—Å–æ–º
üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚ùì –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: {
            url: `${config.WEBAPP_URL}?user_id=${msg.from.id}&first_name=${encodeURIComponent(msg.from.first_name)}&last_name=${encodeURIComponent(msg.from.last_name || '')}&username=${encodeURIComponent(msg.from.username || '')}&is_bot=${msg.from.is_bot}&language_code=${encodeURIComponent(msg.from.language_code || '')}`
          }
        }
      ],
      [
        {
          text: 'üí≥ –ú–æ–π –∫–æ—à–µ–ª–µ–∫',
          callback_data: 'wallet'
        },
        {
          text: 'üîë –ú–æ–∏ –∫–ª—é—á–∏',
          callback_data: 'keys'
        }
      ],
      [
        {
          text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
          callback_data: 'stats'
        },
        {
          text: '‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
          callback_data: 'support'
        }
      ]
    ]
  };

  await bot.sendMessage(chatId, welcomeMessage, {
    reply_markup: keyboard,
    parse_mode: 'Markdown'
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  switch (data) {
    case 'wallet':
      await bot.sendMessage(chatId, 'üí≥ *–í–∞—à –∫–æ—à–µ–ª–µ–∫*\n\n–ë–∞–ª–∞–Ω—Å: 0 ‚ÇΩ\n\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',
                                 web_app: {
                   url: `${config.WEBAPP_URL}/wallet`
                 }
              }
            ]
          ]
        }
      });
      break;

    case 'keys':
      await bot.sendMessage(chatId, 'üîë *–í–∞—à–∏ –∫–ª—é—á–∏*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.\n\n–ö—É–ø–∏—Ç–µ –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üõí –ö—É–ø–∏—Ç—å –∫–ª—é—á',
                                 web_app: {
                   url: config.WEBAPP_URL
                 }
               }
             ]
           ]
         }
       });
       break;

     case 'stats':
       await bot.sendMessage(chatId, 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: 0 –ì–ë\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: 0\n\n–ü–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.', {
         parse_mode: 'Markdown',
         reply_markup: {
           inline_keyboard: [
             [
               {
                 text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                 web_app: {
                   url: config.WEBAPP_URL
                 }
              }
            ]
          ]
        }
      });
      break;

    case 'support':
      await bot.sendMessage(chatId, '‚ùì *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã:\n\nüìß Email: support@r14-vpn.com\nüí¨ Telegram: @r14_support\n\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª FAQ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚ùì FAQ',
                                 web_app: {
                   url: `${config.WEBAPP_URL}/faq`
                 }
              }
            ]
          ]
        }
      });
      break;
  }

  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
  await bot.answerCallbackQuery(query.id);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
  console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ polling –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error('–û—à–∏–±–∫–∞ polling:', error);
});

console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
console.log('–¢–æ–∫–µ–Ω:', token);

module.exports = bot; 