// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Outline —Å–µ—Ä–≤–µ—Ä–æ–º
class OutlineAPI {
  constructor() {
    this.serverId = 'e5d439f5-a184-4ef6-8fc8-d4e8dea63d0c';
    this.serverName = '–°–®–ê (–ù—å—é-–ô–æ—Ä–∫)';
    this.serverLocation = '–ù—å—é-–ô–æ—Ä–∫';
    this.serverFlag = 'üá∫üá∏';
    this.baseUrl = process.env.REACT_APP_OUTLINE_API_URL || 'http://localhost:3001/api/outline';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
  async getServerInfo() {
    try {
      const response = await fetch(`${this.baseUrl}/server/${this.serverId}`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ:', error);
      return {
        id: this.serverId,
        name: this.serverName,
        location: this.serverLocation,
        flag: this.serverFlag,
        status: 'offline',
        metrics: {
          bytesTransferredByUserId: {},
          activeUserCount: 0
        }
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π —Å–µ—Ä–≤–µ—Ä–∞
  async getKeys() {
    try {
      const response = await fetch(`${this.baseUrl}/server/${this.serverId}/keys`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π:', error);
      return [];
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
  async createKey(name = '–ù–æ–≤—ã–π –∫–ª—é—á') {
    try {
      const response = await fetch(`${this.baseUrl}/server/${this.serverId}/keys`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: name,
          method: 'aes-256-gcm',
          password: this.generatePassword()
        })
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞:', error);
      throw error;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
  async deleteKey(keyId) {
    try {
      const response = await fetch(`${this.baseUrl}/server/${this.serverId}/keys/${keyId}`, {
        method: 'DELETE'
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞:', error);
      throw error;
    }
  }

  // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
  async renameKey(keyId, name) {
    try {
      const response = await fetch(`${this.baseUrl}/server/${this.serverId}/keys/${keyId}/name`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name })
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—é—á–∞
  async getKeyStats(keyId) {
    try {
      const response = await fetch(`${this.baseUrl}/server/${this.serverId}/keys/${keyId}/stats`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—é—á–∞:', error);
      return {
        bytesTransferred: 0,
        lastUsed: null
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞
  async getServerMetrics() {
    try {
      const response = await fetch(`${this.baseUrl}/server/${this.serverId}/metrics`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      return {
        bytesTransferredByUserId: {},
        activeUserCount: 0
      };
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
  generatePassword() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let password = '';
    for (let i = 0; i < 32; i++) {
      password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return password;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
  formatBytes(bytes) {
    if (bytes === 0) return '0 –ë';
    const k = 1024;
    const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë', '–¢–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
  async checkServerStatus() {
    try {
      const response = await fetch(`${this.baseUrl}/server/${this.serverId}/status`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      return {
        status: 'offline',
        uptime: 0,
        version: 'unknown'
      };
    }
  }
}

const outlineAPI = new OutlineAPI();
export default outlineAPI; 