const express = require('express');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');
const axios = require('axios');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// In-memory storage (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
const users = new Map();
const keys = new Map();
const transactions = new Map();

// Outline API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const OUTLINE_SERVER_ID = 'e5d439f5-a184-4ef6-8fc8-d4e8dea63d0c';
const OUTLINE_API_URL = process.env.OUTLINE_API_URL || 'https://your-outline-server.com/api';
const OUTLINE_API_KEY = process.env.OUTLINE_API_KEY || 'your-api-key';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const initializeTestData = () => {
  // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const testUserId = '123456789';
  users.set(testUserId, {
    id: testUserId,
    first_name: '–¢–µ—Å—Ç',
    last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    username: 'testuser',
    balance: 1000.00,
    joinDate: new Date().toISOString(),
    plan: 'Premium'
  });

  // –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
  const key1 = {
    id: uuidv4(),
    userId: testUserId,
    name: '–ö–ª—é—á –°–®–ê (–ù—å—é-–ô–æ—Ä–∫)',
    server: 'us-east.outline.com',
    key: 'ss://YWVzLTI1Ni1nY206cGFzc3dvcmQ=@us-east.outline.com:12345',
    status: 'active',
    trafficUsed: '15.2 –ì–ë',
    trafficLimit: '50 –ì–ë',
    expires: '2024-04-15',
    createdAt: '2024-03-01'
  };

  const key2 = {
    id: uuidv4(),
    userId: testUserId,
    name: '–ö–ª—é—á –ì–µ—Ä–º–∞–Ω–∏—è (–§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç)',
    server: 'de.outline.com',
    key: 'ss://YWVzLTI1Ni1nY206cGFzc3dvcmQ=@de.outline.com:12345',
    status: 'active',
    trafficUsed: '8.7 –ì–ë',
    trafficLimit: '50 –ì–ë',
    expires: '2024-04-20',
    createdAt: '2024-03-05'
  };

  keys.set(key1.id, key1);
  keys.set(key2.id, key2);

  // –¢–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const transaction1 = {
    id: uuidv4(),
    userId: testUserId,
    type: 'income',
    amount: 500.00,
    description: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞',
    date: new Date().toISOString()
  };

  const transaction2 = {
    id: uuidv4(),
    userId: testUserId,
    type: 'expense',
    amount: -299.00,
    description: '–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞ –°–®–ê',
    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
  };

  transactions.set(transaction1.id, transaction1);
  transactions.set(transaction2.id, transaction2);
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
initializeTestData();

// Routes

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId/stats', (req, res) => {
  const { userId } = req.params;
  
  try {
    const user = users.get(userId);
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userKeys = Array.from(keys.values()).filter(key => key.userId === userId);
    
    const stats = {
      totalConnections: userKeys.length * 25, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      totalData: userKeys.reduce((sum, key) => {
        const used = parseFloat(key.trafficUsed);
        return sum + (isNaN(used) ? 0 : used);
      }, 0) + ' –ì–ë',
      favoriteServer: userKeys.length > 0 ? userKeys[0].name.split(' ')[1] : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
      lastConnection: userKeys.length > 0 ? '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥' : '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π'
    };

    res.json(stats);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId/traffic', (req, res) => {
  const { userId } = req.params;
  
  try {
    const user = users.get(userId);
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userKeys = Array.from(keys.values()).filter(key => key.userId === userId);
    const totalUsed = userKeys.reduce((sum, key) => {
      const used = parseFloat(key.trafficUsed);
      return sum + (isNaN(used) ? 0 : used);
    }, 0);
    
    const totalLimit = userKeys.reduce((sum, key) => {
      const limit = parseFloat(key.trafficLimit);
      return sum + (isNaN(limit) ? 0 : limit);
    }, 0);

    const trafficStats = {
      totalUsed: totalUsed + ' –ì–ë',
      totalLimit: totalLimit + ' –ì–ë',
      remaining: Math.max(0, totalLimit - totalUsed) + ' –ì–ë',
      period: '30 –¥–Ω–µ–π',
      dailyAverage: (totalUsed / 30).toFixed(1) + ' –ì–ë',
      lastReset: '15 –¥–Ω–µ–π –Ω–∞–∑–∞–¥'
    };

    res.json(trafficStats);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π
app.get('/api/user/:userId/keys', (req, res) => {
  const { userId } = req.params;
  
  try {
    const user = users.get(userId);
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userKeys = Array.from(keys.values()).filter(key => key.userId === userId);
    res.json(userKeys);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
app.get('/api/user/:userId/balance', (req, res) => {
  const { userId } = req.params;
  
  try {
    const user = users.get(userId);
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const balance = {
      amount: user.balance.toFixed(2),
      currency: '‚ÇΩ',
      status: '–ê–∫—Ç–∏–≤–µ–Ω'
    };

    res.json(balance);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
app.get('/api/user/:userId/transactions', (req, res) => {
  const { userId } = req.params;
  
  try {
    const user = users.get(userId);
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userTransactions = Array.from(transactions.values()).filter(t => t.userId === userId);
    res.json(userTransactions);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π Outline
app.get('/api/user/:userId/outline-keys', (req, res) => {
  const { userId } = req.params;
  
  try {
    const user = users.get(userId);
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userKeys = Array.from(keys.values()).filter(key => key.userId === userId);
    res.json(userKeys);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π Outline:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// Health check
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Outline API Routes

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
app.get('/api/outline/server/:serverId', async (req, res) => {
  try {
    const response = await axios.get(`${OUTLINE_API_URL}/server/${OUTLINE_SERVER_ID}`, {
      headers: {
        'Api-Key': OUTLINE_API_KEY
      }
    });
    
    res.json({
      id: OUTLINE_SERVER_ID,
      name: '–°–®–ê (–ù—å—é-–ô–æ—Ä–∫)',
      location: '–ù—å—é-–ô–æ—Ä–∫',
      flag: 'üá∫üá∏',
      status: 'online',
      ...response.data
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Outline —Å–µ—Ä–≤–µ—Ä—É' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/outline/server/:serverId/keys', async (req, res) => {
  try {
    const response = await axios.get(`${OUTLINE_API_URL}/server/${OUTLINE_SERVER_ID}/access-keys`, {
      headers: {
        'Api-Key': OUTLINE_API_KEY
      }
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
    const keysWithStats = await Promise.all(
      response.data.accessKeys.map(async (key) => {
        try {
          const metricsResponse = await axios.get(`${OUTLINE_API_URL}/server/${OUTLINE_SERVER_ID}/metrics/transfer`, {
            headers: {
              'Api-Key': OUTLINE_API_KEY
            }
          });
          
          const bytesTransferred = metricsResponse.data.bytesTransferredByUserId[key.id] || 0;
          
          return {
            ...key,
            trafficUsed: formatBytes(bytesTransferred),
            trafficLimit: '50 –ì–ë',
            status: 'active',
            createdAt: new Date().toISOString(),
            expires: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 –¥–Ω–µ–π
          };
        } catch (metricsError) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–ª—é—á–∞:', key.id, metricsError.message);
          return {
            ...key,
            trafficUsed: '0 –ë',
            trafficLimit: '50 –ì–ë',
            status: 'active',
            createdAt: new Date().toISOString(),
            expires: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
          };
        }
      })
    );
    
    res.json(keysWithStats);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π' });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
app.post('/api/outline/server/:serverId/keys', async (req, res) => {
  try {
    const { name, method = 'aes-256-gcm', password } = req.body;
    
    const response = await axios.post(`${OUTLINE_API_URL}/server/${OUTLINE_SERVER_ID}/access-keys`, {
      method,
      password
    }, {
      headers: {
        'Api-Key': OUTLINE_API_KEY,
        'Content-Type': 'application/json'
      }
    });
    
    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–ª—é—á –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∏–º—è
    if (name && response.data.id) {
      await axios.put(`${OUTLINE_API_URL}/server/${OUTLINE_SERVER_ID}/access-keys/${response.data.id}/name`, {
        name
      }, {
        headers: {
          'Api-Key': OUTLINE_API_KEY,
          'Content-Type': 'application/json'
        }
      });
    }
    
    res.json({
      ...response.data,
      name: name || '–ù–æ–≤—ã–π –∫–ª—é—á',
      trafficUsed: '0 –ë',
      trafficLimit: '50 –ì–ë',
      status: 'active',
      createdAt: new Date().toISOString(),
      expires: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
app.delete('/api/outline/server/:serverId/keys/:keyId', async (req, res) => {
  try {
    const { keyId } = req.params;
    
    await axios.delete(`${OUTLINE_API_URL}/server/${OUTLINE_SERVER_ID}/access-keys/${keyId}`, {
      headers: {
        'Api-Key': OUTLINE_API_KEY
      }
    });
    
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞' });
  }
});

// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
app.put('/api/outline/server/:serverId/keys/:keyId/name', async (req, res) => {
  try {
    const { keyId } = req.params;
    const { name } = req.body;
    
    const response = await axios.put(`${OUTLINE_API_URL}/server/${OUTLINE_SERVER_ID}/access-keys/${keyId}/name`, {
      name
    }, {
      headers: {
        'Api-Key': OUTLINE_API_KEY,
        'Content-Type': 'application/json'
      }
    });
    
    res.json(response.data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/outline/server/:serverId/metrics', async (req, res) => {
  try {
    const response = await axios.get(`${OUTLINE_API_URL}/server/${OUTLINE_SERVER_ID}/metrics/transfer`, {
      headers: {
        'Api-Key': OUTLINE_API_KEY
      }
    });
    
    res.json(response.data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫' });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/outline/server/:serverId/status', async (req, res) => {
  try {
    const response = await axios.get(`${OUTLINE_API_URL}/server/${OUTLINE_SERVER_ID}`, {
      headers: {
        'Api-Key': OUTLINE_API_KEY
      }
    });
    
    res.json({
      status: 'online',
      uptime: Date.now(),
      version: '1.0.0',
      ...response.data
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    res.json({
      status: 'offline',
      uptime: 0,
      version: 'unknown'
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–π—Ç–æ–≤
function formatBytes(bytes) {
  if (bytes === 0) return '0 –ë';
  const k = 1024;
  const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë', '–¢–ë'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Start server
app.listen(PORT, () => {
  console.log(`üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìä Health check: http://localhost:${PORT}/api/health`);
  console.log(`üîó Outline API: ${OUTLINE_API_URL}`);
}); 